/**
 * NOTE: This class is auto generated by the swagger code generator program
 * (2.3.1). https://github.com/swagger-api/swagger-codegen Do not edit the class
 * manually.
 */
package org.codenergic.sample.forex.api;

import java.math.BigDecimal;

import javax.validation.Valid;

import org.codenergic.sample.forex.model.Forex;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(
        value = "io.swagger.codegen.languages.SpringCodegen",
        date = "2018-10-01T09:46:42.687+07:00")

@Api(value = "convert")
public interface ConvertApi {

    @ApiOperation(value = "convert currency",
            nickname = "convertCurrency",
            notes = "By passing in the appropriate options, you can convert for available currency in the system ",
            response = Forex.class,
            tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200,
                    message = "converted result",
                    response = Forex.class),
            @ApiResponse(code = 400, message = "currency not supported") })
    @RequestMapping(value = "/convert/{from}/to/{to}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Forex> convertCurrency(
            @ApiParam(value = "source currency",
                    required = true) @PathVariable("from") String from,
            @ApiParam(value = "destination currency",
                    required = true) @PathVariable("to") String to,
            @ApiParam(value = "amount to convert") @Valid @RequestParam(
                    value = "amount", required = false) BigDecimal amount,
            Authentication auth);

}
